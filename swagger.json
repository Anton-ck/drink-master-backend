{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "DrinkMaster backend documentation",
    "description": "DrinkMaster is application for finding and creating cocktail pecipes"
  },

  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json", "multipart/form-data"],
  "servers": [
    {
      "url": "http://localhost:8000",
      "description": "Development server"
    },
    {
      "url": "https://drink-master-backend.onrender.com",
      "description": "Production server"
    }
  ],
  "tags": [
    { "name": "Auth", "description": "Authorization endpoints" },
    {
      "name": "Own Recipes",
      "description": "Endpoints for user`s own recipes"
    },
    {
      "name": "Favorite Recipes",
      "description": "Endpoints for user`s favorite recipes"
    }
  ],

  "paths": {
    "/users/signup": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RegistrationRequest"
              },
              "examples": {
                "signupBodyExample": {
                  "value": {
                    "name": "Example",
                    "email": "example@example.com",
                    "password": "Examplepassword1"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "201": {
            "description": "Created (signup successful response)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegistrationResponse"
                },
                "examples": {
                  "signupSuccessfulResponseExample": {
                    "value": {
                      "user": {
                        "name": "Example",
                        "email": "example@example.com"
                      }
                    }
                  }
                }
              }
            }
          },

          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SignUpvalidationErrorExample": {
                    "value": {
                      "message": "email Exampletest.com is invalid!"
                    }
                  }
                }
              }
            }
          },

          "409": {
            "description": "Conflict (Provided email already exists)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SignUpErrorExample": {
                    "value": {
                      "message": "Email in use"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/users/signin": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Login object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginRequest"
              },
              "examples": {
                "signinBodyExample": {
                  "value": {
                    "email": "example@example.com",
                    "password": "Examplepassword1"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "OK (signin successful response)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LoginResponse"
                },
                "examples": {
                  "signinSuccessfulResponseExample": {
                    "value": {
                      "token": "tokenexample",
                      "user": {
                        "email": "example@example.com"
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "SignInvalidationErrorExample": {
                    "value": {
                      "message": "email Exampletest.com is invalid!"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized (email or password is wrong)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Email is wrong"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "User logout",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "204": {
            "description": "No Content (logout successful response)"
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/users/current": {
      "get": {
        "tags": ["Auth"],
        "summary": "Get current user`s info",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "OK (user was successfully found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "GetCurrentResponseExample": {
                    "value": {
                      "email": "example@test.com"
                    }
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/users": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Changing user`s info",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Changing user`s info object",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangingInfoRequest"
              },
              "examples": {
                "ChangingInfoBodyExample": {
                  "value": {
                    "name": "Example"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "OK (successful changing info response)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangingInfoResponse"
                },
                "examples": {
                  "ChangingInfoSuccessfulResponseExample": {
                    "value": {
                      "name": "Example"
                    }
                  }
                }
              }
            }
          },

          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ChangingInfovalidationErrorExample": {
                    "value": {
                      "message": "\"name\" is not allowed to be empty"
                    }
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/users/avatars": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Changing user`s avatar",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Changing user`s avatar object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/ChangingaAvatarRequest"
              },
              "encoding": {
                "img": {
                  "contentType": "image/png, image/jpeg, image/jpg",
                  "style": "form"
                }
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "OK (successful changing avatar response)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChangingAvatarResponse"
                },
                "examples": {
                  "ChangingAvatarSuccessfulResponseExample": {
                    "value": {
                      "avatarURL": "https://res.cloudinary.com/Example"
                    }
                  }
                }
              }
            }
          },

          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "ChangingAvatarValidationErrorExample": {
                    "value": {
                      "message": "Wrong extension type! Extensions should be *.png, *.jpg, *.jpeg"
                    }
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/own": {
      "get": {
        "tags": ["Own Recipes"],
        "summary": "Get current user`s saved recipes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "OK (Recipes were successfully found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOwnRecipesResponse"
                },
                "examples": {
                  "GetOwnRecipesResponseExample": {
                    "value": [
                      {
                        "_id": "example_cocktail_id",
                        "drink": "name of cocktail",
                        "category": "Category of cocktail",
                        "alcoholic": "Alcoholic",
                        "glass": "Cocktail glass",
                        "instructions": "Instruction example",
                        "drinkThumb": "https://res.cloudinary.com/",
                        "ingredients": ["ingredient1", "ingredient2"],
                        "usersFavorite": ["Name1", "Name2"],
                        "owner": {
                          "_id": "example_user`s_id",
                          "email": "example@example.com"
                        },
                        "createdAt": "2023-08-27T19:33:05.467Z"
                      }
                    ]
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          }
        }
      },

      "post": {
        "tags": ["Own Recipes"],
        "summary": "Creating a new cocktail recipe",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "requestBody": {
          "description": "Cocktail Creating object",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/CreatingCocktailRequest"
              },
              "examples": {
                "CocktailCreatingBodyExample": {
                  "value": {
                    "_id": "example_cocktail_id",
                    "drink": "name of cocktail",
                    "category": "Category of cocktail",
                    "alcoholic": "Alcoholic",
                    "glass": "Cocktail glass",
                    "instructions": "Instruction example",
                    "drinkThumb": "https://res.cloudinary.com/",
                    "ingredients": ["ingredient1", "ingredient2"],
                    "usersFavorite": ["Name1", "Name2"],
                    "owner": {
                      "_id": "example_user`s_id",
                      "email": "example@example.com"
                    },
                    "createdAt": "2023-08-27T19:33:05.467Z"
                  }
                }
              }
            }
          }
        },

        "responses": {
          "201": {
            "description": "Created (Cocktail has been successfully created)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CocktailRecipe"
                },
                "examples": {
                  "CreatingSuccessfulResponseExample": {
                    "value": {
                      "_id": "example_cocktail_id",
                      "drink": "name of cocktail",
                      "category": "Category of cocktail",
                      "alcoholic": "Alcoholic",
                      "glass": "Cocktail glass",
                      "instructions": "Instruction example",
                      "drinkThumb": "https://res.cloudinary.com/",
                      "ingredients": ["ingredient1", "ingredient2"],
                      "usersFavorite": ["Name1", "Name2"],
                      "owner": {
                        "_id": "example_user`s_id",
                        "email": "example@example.com"
                      },
                      "createdAt": "2023-08-27T19:33:05.467Z"
                    }
                  }
                }
              }
            }
          },

          "400": {
            "description": "Bad request (invalid request body)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "CreatingCocktailErrorExample": {
                    "value": {
                      "message": "\"examplefield\" is not allowed to be empty"
                    }
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/own/:id": {
      "delete": {
        "tags": ["Own Recipes"],
        "summary": "Delete one user`s recipes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "id",
            "in": "path",
            "description": "Recipe Id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "OK (Recipe was successfully deleted)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteOwnRecipesResponse"
                },
                "examples": {
                  "DeleteOwnRecipesResponseExample": {
                    "value": {
                      "message": "Cocktail deleted"
                    }
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          },

          "404": {
            "description": "Not Found (There is no such a cocktail in the data-base)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "NotFoundErrorExample": {
                    "value": {
                      "message": "The requested cocktail was not found"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/favorite": {
      "get": {
        "tags": ["Favorite Recipes"],
        "summary": "Get current user`s favorite recipes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "OK (Recipes were successfully found)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetOwnRecipesResponse"
                },
                "examples": {
                  "GetFavoriteRecipesResponseExample": {
                    "value": [
                      {
                        "_id": "example_cocktail_id",
                        "drink": "name of cocktail",
                        "category": "Category of cocktail",
                        "alcoholic": "Alcoholic",
                        "glass": "Cocktail glass",
                        "instructions": "Instruction example",
                        "drinkThumb": "https://res.cloudinary.com/",
                        "ingredients": ["ingredient1", "ingredient2"],
                        "usersFavorite": ["Name1", "Name2"],
                        "owner": {
                          "_id": "example_user`s_id",
                          "email": "example@example.com"
                        },
                        "createdAt": "2023-08-27T19:33:05.467Z"
                      }
                    ]
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },

    "/favorite/:recipId": {
      "patch": {
        "tags": ["Favorite Recipes"],
        "summary": "Add one recipe to user`s favorite",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipId",
            "in": "path",
            "description": "Recipe Id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "OK (Recipe was successfully added to favorite)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AddToFavoriteRecipesResponse"
                },
                "examples": {
                  "AddToFavoriteRecipesResponseExample": {
                    "value": {
                      "message": "Cocktail added to favorite"
                    }
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          },

          "409": {
            "description": "Conflict (Cocktail has been added to favorites earlier)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AddToFavoriteErrorExample": {
                    "value": {
                      "message": "Favorite cocktail added early"
                    }
                  }
                }
              }
            }
          }
        }
      },

      "delete": {
        "tags": ["Favorite Recipes"],
        "summary": "Delete one user`s recipes",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "description": "Current user`s token",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "recipId",
            "in": "path",
            "description": "Recipe Id",
            "required": true,
            "style": "simple",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "security": [{ "Bearer": [] }],

        "responses": {
          "200": {
            "description": "OK (Recipe was successfully deleted)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DeleteOwnRecipesResponse"
                },
                "examples": {
                  "DeleteFromFavoritesRecipesResponseExample": {
                    "value": {
                      "message": "Cocktail deleted from favorite"
                    }
                  }
                }
              }
            }
          },

          "401": {
            "description": "Unauthorized (user isn`t authorized)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "AuthorizationErrorExample": {
                    "value": {
                      "message": "Not authorized"
                    }
                  }
                }
              }
            }
          },

          "409": {
            "description": "Conflict (Cocktail has been deleted from favorites earlier)",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Error"
                },
                "examples": {
                  "DeleteFromFavoritesErrorExample": {
                    "value": {
                      "message": "Favorite cocktail deleted early"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegistrationRequest": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name, from 3 to 16 symbols"
          },
          "email": {
            "type": "string",
            "description": "User's email, should match regular expression",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password, at least 6 symbols, should contain at least one number, one uppercase letter and one lowercase letter",
            "format": "password",
            "example": "Examplepassword1"
          }
        }
      },

      "RegistrationResponse": {
        "type": "object",
        "properties": {
          "user": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "User's name, from 3 to 16 symbols"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },

      "LoginRequest": {
        "type": "object",
        "required": ["email", "password"],
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email, should match regular expression",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password, should contain at least one number, one uppercase letter and one lowercase letter",
            "format": "password",
            "example": "Examplepassword1"
          }
        }
      },

      "LoginResponse": {
        "type": "object",
        "properties": {
          "token": {
            "type": "string",
            "description": "User's access token"
          },
          "user": {
            "type": "object",
            "properties": {
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            }
          }
        }
      },

      "Error": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Authorization, validation or another error"
          }
        }
      },

      "GetCurrentResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Current user`s email",
            "format": "email"
          }
        }
      },

      "ChangingInfoRequest": {
        "type": "object",
        "required": ["name"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name, from 3 to 16 symbols"
          }
        }
      },

      "ChangingInfoResponse": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name after successful changing"
          }
        }
      },

      "ChangingaAvatarRequest": {
        "type": "object",
        "properties": {
          "img": {
            "type": "string",
            "description": "New user`s avatar",
            "format": "binary"
          }
        }
      },

      "ChangingAvatarResponse": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "description": "Link to User's avatar after successful changing"
          }
        }
      },

      "GetOwnRecipesResponse": {
        "type": "array",
        "properties": {
          "items": {
            "allOf": [
              {
                "$ref": "#/components/schemas/CocktailRecipe"
              }
            ]
          }
        }
      },

      "CocktailRecipe": {
        "type": "object",
        "required": [
          "drink",
          "category",
          "alcoholic",
          "glass",
          "instructions",
          "drinkThumb",
          "ingredients",
          "owner"
        ],
        "properties": {
          "drink": {
            "type": "string",
            "description": "Cocktail name, should contain at least 2 symbols"
          },
          "drinkAlternate": {
            "type": "string",
            "description": "I have any clue what it is :)"
          },
          "tags": {
            "type": "string",
            "description": "Some tags which related to cocktail"
          },
          "video": {
            "type": "string",
            "description": "Link to the cocktail preparation video"
          },
          "description": {
            "type": "string",
            "description": "Description of the cocktail"
          },
          "category": {
            "type": "string",
            "description": "Category of the cocktail, should be chosen from suggested list of categories"
          },
          "IBA": {
            "type": "string",
            "description": "I have any clue what it is also :)"
          },
          "alcoholic": {
            "type": "string",
            "description": "Type of the cocktail, should be chosen from suggested values: alcoholic/non alcoholic"
          },
          "glass": {
            "type": "string",
            "description": "Category of the cocktail, should be chosen from suggested list of categories"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions to the preparation of the cocktail"
          },
          "instructionsES": {
            "type": "string",
            "description": "Instructions in Spanish"
          },
          "instructionsDE": {
            "type": "string",
            "description": "Instructions in German"
          },
          "instructionsFR": {
            "type": "string",
            "description": "Instructions in French"
          },
          "instructionsIT": {
            "type": "string",
            "description": "Instructions in Italian"
          },
          "instructionsRU": {
            "type": "string",
            "description": "Should be replaced by Ukranian"
          },
          "instructionsPL": {
            "type": "string",
            "description": "Instructions in Polish"
          },
          "instructionsUK": {
            "type": "string",
            "description": "Instructions in English"
          },
          "drinkThumb": {
            "type": "string",
            "description": "Link to the cocktail image",
            "format": "binary"
          },
          "ingredients": {
            "type": "array",
            "description": "Array of cocktail ingredients",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ingredient"
                }
              ]
            },
            "format": "array"
          },
          "usersFavorite": {
            "type": "array",
            "description": "Array of users who added cocktail to favorites",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/User"
                }
              ]
            },
            "format": "array"
          },
          "owner": {
            "type": "object",
            "description": "User who added the cocktail",
            "properties": {
              "_id": {
                "type": "string",
                "description": "User's id"
              },
              "email": {
                "type": "string",
                "description": "User's email",
                "format": "email"
              }
            },
            "format": "object"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of cocktail creation",
            "format": "date-time"
          }
        }
      },

      "CreatingCocktailRequest": {
        "type": "object",
        "required": [
          "drink",
          "category",
          "alcoholic",
          "glass",
          "instructions",
          "drinkThumb",
          "ingredients"
        ],
        "properties": {
          "drink": {
            "type": "string",
            "description": "Cocktail name, should contain at least 2 symbols"
          },
          "description": {
            "type": "string",
            "description": "Description of the cocktail"
          },
          "category": {
            "type": "string",
            "description": "Category of the cocktail, should be chosen from suggested list of categories"
          },
          "alcoholic": {
            "type": "string",
            "description": "Type of the cocktail, should be chosen from suggested values: alcoholic/non alcoholic"
          },
          "glass": {
            "type": "string",
            "description": "Category of the cocktail, should be chosen from suggested list of categories"
          },
          "instructions": {
            "type": "string",
            "description": "Instructions to the preparation of the cocktail"
          },
          "drinkThumb": {
            "type": "string",
            "description": "Link to the cocktail image",
            "format": "binary"
          },
          "ingredients": {
            "type": "array",
            "description": "Array of cocktail ingredients",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Ingredient"
                }
              ]
            },
            "format": "array"
          }
        }
      },

      "Ingredient": {
        "type": "object",
        "required": ["title", "ingredientThumb", "thumb-medium", "thumb-small"],
        "properties": {
          "title": {
            "type": "string",
            "description": "Ingredient name"
          },
          "ingredientThumb": {
            "type": "string",
            "description": "Link to the large ingredient image"
          },
          "thumb-medium": {
            "type": "string",
            "description": "Link to the medium ingredient image"
          },
          "thumb-small": {
            "type": "string",
            "description": "Link to the small ingredient image"
          }
        }
      },

      "User": {
        "type": "object",
        "required": ["name", "email", "password"],
        "properties": {
          "name": {
            "type": "string",
            "description": "User's name, from 3 to 16 symbols"
          },
          "email": {
            "type": "string",
            "description": "User's email, should match regular expression",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User's password, at least 6 symbols, should contain at least one number, one uppercase letter and one lowercase letter",
            "format": "password"
          },
          "verificationToken": {
            "type": "string",
            "description": "User`s access token"
          },
          "avatarURL": {
            "type": "string",
            "description": "Link to the user`s avatar"
          },
          "subscription": {
            "type": "boolean",
            "description": "Determines if the user has a subscription or not"
          },
          "verify": {
            "type": "boolean",
            "description": "Determines if the user has verified their email or not"
          },
          "createdAt": {
            "type": "string",
            "description": "Date of user`s creation in the data-base",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Date of user`s update in the data-base",
            "format": "date-time"
          }
        }
      },

      "DeleteOwnRecipesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message about successful recipe deleting"
          }
        }
      },

      "AddToFavoriteRecipesResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Message about successful recipe adding to favorite"
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
